package arraysmanipulation;

import java.util.LinkedList;
import java.util.Queue;

public class JudgeConnections {

    private int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    public static final void main(String[] args) {
        int[][] values= {{823,159,380,917,121,498,978,950,598,51,53,54,98,98,98,98,98,98,73,582,175,772,875,24,359,960,501,554,208,78},
                {781,318,412,703,58,261,576,463,900,325,966,521,98,98,98,98,86,98,98,686,705,668,883,23,949,632,712,157,964,325},
                {852,186,827,812,27,574,838,884,373,5,83,496,98,98,98,98,98,98,98,98,549,930,771,205,686,345,707,671,238,311},
                {544,789,508,123,144,538,441,312,63,804,117,610,857,883,98,98,98,200,98,188,265,484,275,360,935,131,945,191,301,93},
                {978,422,529,94,143,345,749,950,579,174,20,168,311,991,98,548,0,579,98,460,595,574,36,591,862,560,972,487,694,813},
                {272,724,229,690,116,612,198,42,231,320,223,197,647,321,98,98,98,98,118,79,590,31,696,242,874,669,882,53,118,342},
                {555,247,611,296,615,625,849,953,880,259,819,135,337,458,98,98,98,98,98,98,98,98,98,98,98,98,98,98,253,735},
                {816,272,544,397,77,774,898,384,52,792,163,208,242,521,98,98,98,98,98,98,98,98,221,98,631,98,98,98,98,98},
                {919,156,386,611,977,153,186,661,952,0,270,496,304,465,98,98,893,269,953,98,98,98,98,98,98,98,98,98,98,98},
                {323,620,512,828,658,965,55,538,855,736,622,908,6,66,98,98,98,98,98,98,98,533,98,98,98,98,98,127,98,98},
                {15,919,480,884,122,138,262,119,429,141,451,69,710,469,98,98,98,98,98,98,985,234,98,81,98,98,294,250,404,821},
                {427,104,226,903,826,120,886,767,20,265,237,448,113,385,98,98,284,98,98,98,98,534,98,98,98,736,778,532,968,562},
                {286,185,927,221,452,2,685,825,85,128,527,381,176,179,98,86,397,98,98,98,98,98,98,98,98,98,756,117,477,420},
                {277,188,605,85,675,944,242,371,511,125,728,563,777,393,98,98,98,98,98,98,98,98,98,98,98,98,419,680,907,29},
                {555,409,837,735,230,362,790,600,170,806,33,631,326,192,98,98,98,98,98,98,402,810,98,299,98,98,98,98,150,140},
                {559,237,686,610,444,249,157,159,488,139,756,150,539,524,98,98,98,98,558,98,98,769,98,98,98,98,412,98,98,98},
                {359,915,645,235,799,696,485,344,879,373,708,118,249,545,98,98,98,609,66,98,939,532,98,98,624,98,98,98,98,200},
                {215,918,989,972,23,83,5,712,43,904,311,854,374,663,98,98,98,584,946,98,98,98,98,98,98,270,98,98,98,394},
                {471,882,400,338,16,996,141,64,386,653,627,365,228,640,98,825,98,98,98,704,98,98,98,98,98,98,195,98,98,98},
                {265,14,717,272,655,849,398,273,746,56,63,38,496,439,824,828,351,98,98,98,98,757,98,503,98,98,431,98,98,98},
                {8,510,852,0,898,784,160,615,462,7,727,257,951,759,221,495,348,76,98,791,714,802,98,98,98,98,98,98,98,98},
                {14,389,351,424,885,781,489,886,207,282,48,872,722,915,574,281,728,241,98,98,592,567,98,98,98,98,98,323,98,98},
                {946,126,54,635,294,988,283,723,254,24,676,679,243,898,516,247,67,71,98,250,762,182,98,98,98,98,98,155,98,98},
                {610,551,442,144,579,274,716,613,234,702,302,489,968,618,972,690,512,572,98,98,98,98,349,98,108,53,98,98,633,98},
                {167,582,434,957,33,618,356,486,10,842,676,551,119,682,652,568,535,725,98,98,119,98,98,98,98,98,98,98,768,98},
                {209,213,478,980,806,826,555,971,815,507,866,194,258,317,203,114,219,182,98,98,98,98,98,999,98,98,360,98,98,98},
                {675,720,855,714,930,753,90,381,650,872,764,873,217,114,206,84,873,767,98,98,98,836,98,98,153,98,98,98,98,98},
                {793,415,434,148,826,336,947,361,178,758,319,538,546,817,227,386,993,205,156,98,774,593,98,98,423,98,460,98,433,98},
                {901,439,538,235,182,183,404,207,762,524,200,756,143,795,843,966,147,706,857,98,98,98,98,98,98,98,280,98,98,899},
                {818,639,748,986,938,378,77,228,945,352,51,10,509,222,253,286,906,791,375,189,98,98,98,98,98,98,98,98,98,748},
                {567,621,580,564,555,199,668,507,911,555,794,331,461,140,233,157,417,2,979,145,98,98,98,98,98,448,98,98,98,98},
                {725,38,708,71,450,177,5,295,694,311,986,73,581,3,940,607,312,481,724,523,98,98,215,912,98,98,442,512,98,943},
                {486,55,174,886,898,764,17,823,160,354,363,943,21,208,732,466,283,988,395,224,98,620,1,992,98,98,248,363,98,98},
                {113,514,145,650,445,619,730,966,744,764,990,990,751,826,425,258,356,426,470,348,98,98,875,171,98,98,244,386,868,98},
                {486,108,34,327,682,175,243,151,654,566,648,91,73,440,59,271,328,185,458,335,98,98,98,98,98,98,98,98,98,98},
                {274,681,155,512,299,960,105,100,405,720,588,989,610,967,381,483,355,378,642,896,98,98,98,98,604,298,98,98,98,98},
                {460,124,831,28,31,588,562,679,129,426,658,791,92,126,903,684,550,54,239,390,98,98,954,98,823,31,98,98,454,98},
                {583,749,951,344,74,853,712,15,60,678,922,638,938,324,0,580,100,717,72,556,98,785,474,98,98,441,98,98,98,871},
                {469,603,69,113,704,24,394,444,390,360,314,805,849,811,700,541,399,580,892,811,98,98,98,664,98,98,63,98,428,874},
                {330,771,419,165,466,912,421,261,706,513,748,810,922,895,827,730,370,81,428,620,158,98,98,98,806,98,301,98,98,98}};
        new JudgeConnections().judgeConnection(values
                , 98);
    }

    /**
     * @param arr: the arr
     * @param k:   the k
     * @return: if all instances of value k in arr are connected
     */
    public boolean judgeConnection(int[][] arr, int k) {
        int m = arr.length;
        int n = arr[0].length;
        return help(arr, k, false);
    }

    private boolean help(int[][] arr, int k, boolean found) {
        int m = arr.length;
        int n = arr[0].length;
        boolean res = true;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (arr[i][j] != k) {
                    continue;
                } else if (found) {
                    return false;
                } else {
                    found = true;
                    reset(arr, i, j, k);
                }
            }
        }
        return res;
    }

    private void reset(int[][] arr, int i, int j, int k) {
        int m = arr.length;
        int n = arr[0].length;
        System.out.println("m="+ m+ "  n="+n);
        int row = 0;
        int col = 0;

        Queue<Tuple> points = new LinkedList<>();
        points.offer(new Tuple(i, j));
        arr[i][j] -= 1;

        while (!points.isEmpty()) {
            System.out.println("size=" + points.size());
            Tuple tuple = points.poll();

            for (int z = 0; z < 4; z++) {
                row = tuple.row + directions[z][0];
                col = tuple.col + directions[z][1];

                if (row >= 0 && row < m && col >= 0 && col < n && arr[row][col] == k) {
                    System.out.println("add row="+ row+ " col="+ col + " arr[row][col]="+ arr[row][col]);
                    arr[row][col]-=1;// reset the flag here to reduce duplication in dfs
                    points.offer(new Tuple(row, col));
                }
            }

        }
    }

    class Tuple {
        public int row;
        public int col;

        Tuple(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }
}
